package trees.nodes;

/**
 * A binary search tree node that stores word/definition pairs.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class DictionaryNode
{
    /*
        Note: This is breaking encapsulation, but we
        will keep our fields public to write code that
        is similar to what we see when the node class
        is an inner-class.
     */
    public String word;
    public String definition;
    public DictionaryNode left;
    public DictionaryNode right;

    /**
     * Creates a new node object.
     * @param word the word to store in the node
     * @param definition the definition to store in the node
     */
    public DictionaryNode(String word, String definition)
    {
        this.word = word;
        this.definition = definition;
    }

    /**
     * Constructs a node with a new element-pair and
     * reference to the left and right node in the tree.
     *
     * @param word the word to store in the node
     * @param definition the definition to store in the node
     * @param left the reference to the left child
     * @param right the reference to the right child
     */
    public DictionaryNode(String word, String definition, DictionaryNode left, DictionaryNode right)
    {
        this.word = word;
        this.definition = definition;
        this.left = left;
        this.right = right;
    }

    public StringBuilder toString(StringBuilder prefix, boolean isTail, StringBuilder builder)
    {
        if(right!=null)
        {
            right.toString(new StringBuilder().append(prefix).append(isTail ? "│   " : "    "), false, builder);
        }

        builder.append(prefix).append(isTail ? "└── " : "┌── ").append(word).append("\n");

        if(left!=null)
        {
            left.toString(new StringBuilder().append(prefix).append(isTail ? "    " : "│   "), true, builder);
        }

        return builder;
    }

    /**
     * Builds a visualization of the tree on the Java console.
     *
     * @see https://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram-in-java/8948691#8948691
     * @return a diagram of the tree
     */
    @Override
    public String toString()
    {
        return toString(new StringBuilder(), true, new StringBuilder()).toString();
    }
}
