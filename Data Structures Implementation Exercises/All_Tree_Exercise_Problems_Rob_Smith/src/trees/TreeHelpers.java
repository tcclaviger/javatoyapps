package trees;

import trees.nodes.Node;

import java.util.Random;

/**
 * This class contains helper methods for assembling
 * binary search trees.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class TreeHelpers
{
    /**
     * Adds a new node to an existing tree. If the tree
     * is empty, then a new Node object is returned as
     * the root of the new tree.
     *
     * @param root the root of a binary search tree
     * @param element a new element to add to the tree
     * @return returns the root of the tree after the
     * element was inserted
     */
    public static Node add(Node root, int element)
    {
        if (root == null)
        {
            return new Node(element);
        }
        else if (root.data == element)
        {
            return root;
        }
        else if (root.data > element)
        {
            //traverse left recursively
            root.left = add(root.left, element);
        }
        else
        {
            //traverse right recursively
            root.right = add(root.right, element);
        }
        return root;
    }

    /**
     * Adds a group of elements to a new binary search
     * tree.
     *
     * @param elements a group of tree elements
     * @return the reference to the root of a new binary
     * search tree
     */
    public static Node addAll(int[] elements)
    {
        Node root = null;
        for (int element : elements)
        {
            root = add(root, element);
        }
        return root;
    }

    /**
     * Creates a random binary search tree using the request number
     * of random elements.
     *
     * @param size how many elements to add to the tree
     * @return a reference to the root of the new tree
     */
    public static Node randomTree(int size)
    {
        Random random = new Random();
        Node root = null;
        for (int i = 0; i < size; i++)
        {
            //increase the range of values added by multiplying by 2
            //(this tries to reduce the number of duplicates rejected)
            root = add(root, random.nextInt(1, size * 2));
        }
        return root;
    }
}
